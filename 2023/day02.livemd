# AOC 2023 - Day 02

```elixir
Mix.install([
  {:smaoc, git: "https://github.com/nettinho/smaoc"}
])
```

## Section

```elixir
defmodule Model do
  defmodule Set do
    defstruct red: 0, green: 0, blue: 0

    # with only 12 red cubes, 13 green cubes, and 14 blue cubes
    def valid?(%Set{red: r, green: g, blue: b}) when r <= 12 and g <= 13 and b <= 14 do
      true
    end

    def valid?(%Set{} = _set), do: false
  end

  defmodule Game do
    defstruct game_id: nil, sets: [], power: nil

    def valid?(%Game{} = game) do
      Enum.all?(game.sets, &Set.valid?/1)
    end

    def compute_power(%Game{} = game) do
      max_rgb =
        Enum.reduce(game.sets, %{r: 0, g: 0, b: 0}, fn %Set{} = set, acc ->
          %{
            r: max(acc.r, set.red),
            g: max(acc.g, set.green),
            b: max(acc.b, set.blue)
          }
        end)

      %{game | power: max_rgb.r * max_rgb.g * max_rgb.b}
    end
  end
end

defmodule Smaoc.Solution do
  alias Model.Set
  alias Model.Game

  defp parse_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      r = ~r/^Game (\d+): (.*)/
      Regex.run(r, line)
    end)
    |> Enum.map(fn [_, game_id, sets_specs] ->
      sets =
        sets_specs
        |> String.split(";")
        |> Enum.map(fn set_spec ->
          Regex.scan(~r/(\d+) (\w+)/, set_spec)
          |> Enum.map(fn [_, n, color] ->
            {String.to_atom(color), String.to_integer(n)}
          end)
        end)
        |> Enum.map(&struct!(Set, &1))

      %Game{
        game_id: String.to_integer(game_id),
        sets: sets
      }
    end)
  end

  def solve(:part1, input) do
    parse_input(input)
    |> Enum.filter(&Game.valid?/1)
    |> Enum.map(& &1.game_id)
    |> Enum.sum()
    |> dbg()
  end

  def solve(:part2, input) do
    parse_input(input)
    |> Enum.map(&Game.compute_power/1)
    |> Enum.map(& &1.power)
    |> Enum.sum()
    |> dbg()
  end
end

year = "2023"
day = "2"
run_config = ["example", "part1"]

inputs = %{
  "puzzle" => "",
  "example" =>
    "Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green"
}

response =
  for part <- ["part1", "part2"], input_key <- ["puzzle", "example"] do
    {part, input_key}
  end

response =
  response
  |> Enum.filter(fn {part, input_key} ->
    part in run_config and input_key in run_config
  end)
  |> Enum.map(fn {part, input_key} ->
    [part, input_key, Smaoc.Solution.solve(String.to_atom(part), inputs[input_key])]
  end)

Smaoc.Response.new(%{response: response, run_config: run_config, year: year, day: day})
```
