# AOC 2023 - Day 02

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Common

```elixir
defmodule Model do
  defmodule Set do
    defstruct red: 0, green: 0, blue: 0

    # with only 12 red cubes, 13 green cubes, and 14 blue cubes
    def valid?(%Set{red: r, green: g, blue: b}) when r <= 12 and g <= 13 and b <= 14 do
      true
    end

    def valid?(%Set{} = _set), do: false
  end

  defmodule Game do
    defstruct game_id: nil, sets: [], power: nil

    def valid?(%Game{} = game) do
      Enum.all?(game.sets, &Set.valid?/1)
    end

    def compute_power(%Game{} = game) do
      max_rgb =
        Enum.reduce(game.sets, %{r: 0, g: 0, b: 0}, fn %Set{} = set, acc ->
          %{
            r: max(acc.r, set.red),
            g: max(acc.g, set.green),
            b: max(acc.b, set.blue)
          }
        end)

      %{game | power: max_rgb.r * max_rgb.g * max_rgb.b}
    end
  end
end

defmodule Aoc do
  alias Model.Set
  alias Model.Game

  defp parse_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      r = ~r/^Game (\d+): (.*)/
      Regex.run(r, line)
    end)
    |> Enum.map(fn [_, game_id, sets_specs] ->
      sets =
        sets_specs
        |> String.split(";")
        |> Enum.map(fn set_spec ->
          Regex.scan(~r/(\d+) (\w+)/, set_spec)
          |> Enum.map(fn [_, n, color] ->
            {String.to_atom(color), String.to_integer(n)}
          end)
        end)
        |> Enum.map(&struct!(Set, &1))

      %Game{
        game_id: String.to_integer(game_id),
        sets: sets
      }
    end)
  end

  def solve(:part1, input) do
    parse_input(input)
    |> Enum.filter(&Game.valid?/1)
    |> Enum.map(& &1.game_id)
    |> Enum.sum()
    |> dbg()
  end

  def solve(:part2, input) do
    parse_input(input)
    |> Enum.map(&Game.compute_power/1)
    |> Enum.map(& &1.power)
    |> Enum.sum()
    |> dbg()
  end
end
```

## Part 1

```elixir
input_1 = Kino.Input.textarea("input:")
```

```elixir
Aoc.solve(:part1, Kino.Input.read(input_1))
```

## Part 2

```elixir
input_2 = Kino.Input.textarea("input:")
```

```elixir
Aoc.solve(:part2, Kino.Input.read(input_2))
```

<!-- livebook:{"offset":2165,"stamp":{"token":"XCP.tuzY9cgK4MYe-9AzjSyvN57MQSS2v1-D4EeQ5Mfizd66uT9ytJouA5cEA8_SQwB3i_QeCCQ2mAUxayFCY3eQKbJjqay6wbStv9uPLGk4xHm_h9x1x94","version":2}} -->
