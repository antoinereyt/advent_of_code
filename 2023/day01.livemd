# AOC 2023 - Day 01

```elixir
Mix.install([
  # {:smaoc, git: "https://github.com/nettinho/smaoc"}
  {:kino, "~> 0.11"}
])
```

## Common

```elixir
defmodule Aoc do
  defp parse_input(input) do
    input |> String.split("\n", trim: true)
  end

  def solve(:part1, input) do
    parse_input(input)
    |> Enum.map(fn line ->
      Regex.scan(~r/\d/, line)
    end)
    |> Enum.map(&List.flatten/1)
    |> Enum.map(fn numbers ->
      [
        numbers |> List.first(),
        numbers |> List.last()
      ]
    end)
    |> Enum.map(&Enum.join/1)
    |> Enum.map(&String.to_integer/1)
    |> Enum.sum()
    |> dbg()
  end

  def solve(:part2, input) do
    digits = ~w(one two three four five six seven eight nine)
    r = ~r/(?=(\d|one|two|three|four|five|six|seven|eight|nine))/

    a_to_i =
      Enum.concat(
        digits |> Enum.with_index(1) |> Map.new(),
        1..9 |> Enum.map(&{"#{&1}", &1})
      )
      |> Map.new()

    parse_input(input)
    |> Enum.map(fn line ->
      Regex.scan(r, line, capture: :all_but_first)
    end)
    |> Enum.map(&List.flatten/1)
    |> Enum.map(fn numbers ->
      [
        numbers |> List.first(),
        numbers |> List.last()
      ]
    end)
    |> Enum.map(fn x ->
      x |> Enum.map(&a_to_i[&1])
    end)
    |> Enum.map(&Integer.undigits/1)
    |> Enum.sum()
    |> dbg()
  end
end
```

## Part 1

```elixir
input_1 = Kino.Input.textarea("input:")
```

In this example, the calibration values of these four lines are 12, 38, 15, and 77.

Adding these together produces 142.

```elixir
Aoc.solve(:part1, Kino.Input.read(input_1))
```

## Part 2

```elixir
input_2 = Kino.Input.textarea("input:")
```

In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76.

Adding these together produces 281.

```elixir
Aoc.solve(:part2, Kino.Input.read(input_2))
```

<!-- livebook:{"offset":1832,"stamp":{"token":"XCP.vazMs0NZX_kJ7gnc4BBFwgXHL7aZijXyVf1GM0NLikuY5GFEMR-skwCMugrw450OJpdTyz6hWWVYQci5Yj5_7gJfqMZy-SsbqIhMO20Tm8OUrgYVako","version":2}} -->
